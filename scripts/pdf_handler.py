import fitz  # PyMuPDF
import os
from datetime import datetime
import logging

logger = logging.getLogger(__name__)

class PDFHandler:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å PDF —Ñ–∞–π–ª–∞–º–∏ - –æ—Ç–∫—Ä—ã—Ç–∏–µ, —á—Ç–µ–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ"""
    
    def __init__(self):
        self.document = None
        self.input_path = None
    
    def open_pdf(self, file_path):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç PDF —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        try:
            self.input_path = file_path
            self.document = fitz.open(file_path)
            logger.info(f"üìÑ PDF —Ñ–∞–π–ª –æ—Ç–∫—Ä—ã—Ç: {os.path.basename(file_path)}")
            logger.info(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {len(self.document)}")
            return self.document
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ PDF —Ñ–∞–π–ª–∞: {str(e)}")
            raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å PDF —Ñ–∞–π–ª: {str(e)}")
    
    def get_page_text_methods(self, page):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ä–∞–∑–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        methods = {}
        
        try:
            methods['standard'] = page.get_text()
        except Exception as e:
            methods['standard'] = f"ERROR: {str(e)}"
        
        try:
            methods['text_format'] = page.get_text("text")
        except Exception as e:
            methods['text_format'] = f"ERROR: {str(e)}"
        
        try:
            blocks = page.get_text("blocks")
            methods['blocks'] = "\n".join([block[4] for block in blocks if len(block) > 4])
        except Exception as e:
            methods['blocks'] = f"ERROR: {str(e)}"
        
        try:
            text_dict = page.get_text("dict")
            text_parts = []
            for block in text_dict.get("blocks", []):
                if "lines" in block:
                    for line in block["lines"]:
                        for span in line["spans"]:
                            text_parts.append(span.get("text", ""))
            methods['dict_method'] = "".join(text_parts)
        except Exception as e:
            methods['dict_method'] = f"ERROR: {str(e)}"
        
        return methods
    
    def find_char_position_in_spans(self, page, target_char, global_position):
        """–ù–∞—Ö–æ–¥–∏—Ç —Ç–æ—á–Ω—É—é –ø–æ–∑–∏—Ü–∏—é —Å–∏–º–≤–æ–ª–∞ –≤ span'–∞—Ö –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            text_dict = page.get_text("dict")
            char_counter = 0
            
            for block in text_dict.get("blocks", []):
                if "lines" not in block:
                    continue
                
                for line in block["lines"]:
                    for span in line["spans"]:
                        span_text = span.get("text", "")
                        
                        for i, char in enumerate(span_text):
                            if char_counter == global_position and char == target_char:
                                # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é —Å–∏–º–≤–æ–ª–∞ –≤ span'–µ
                                bbox = span["bbox"]
                                char_width = (bbox[2] - bbox[0]) / len(span_text) if len(span_text) > 0 else 10
                                
                                char_rect = fitz.Rect(
                                    bbox[0] + i * char_width,
                                    bbox[1],
                                    bbox[0] + (i + 1) * char_width,
                                    bbox[3]
                                )
                                
                                return char_rect
                            
                            char_counter += 1
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ span'–∞—Ö: {str(e)}")
            return None
    
    def add_annotation_to_page(self, page, quote_char, page_text, char_position):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É PDF"""
        annotations_added = 0
        
        try:
            # –ú–µ—Ç–æ–¥ 1: –ò—Å–ø–æ–ª—å–∑—É–µ–º search_for –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö –≤—Ö–æ–∂–¥–µ–Ω–∏–π
            quote_instances = page.search_for(quote_char)
            
            if quote_instances:
                logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(quote_instances)} –≤—Ö–æ–∂–¥–µ–Ω–∏–π '{quote_char}' —á–µ—Ä–µ–∑ search_for")
                
                # –ê–Ω–Ω–æ—Ç–∏—Ä—É–µ–º –í–°–ï –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è
                for i, rect in enumerate(quote_instances):
                    try:
                        full_annotation_text = (
                            '–í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –Ω–µ —Ç–µ –∫–∞–≤—ã—á–∫–∏. –ó–∞–º–µ–Ω–∏—Ç–µ –∏—Ö –Ω–∞ ¬´—ë–ª–æ—á–∫–∏¬ª –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º.\n'
                            f'–ù–∞–π–¥–µ–Ω —Å–∏–º–≤–æ–ª: "{quote_char}" (U+{ord(quote_char):04X})'
                        )
                        annotation = page.add_text_annot(
                            rect.tl,
                            full_annotation_text
                        )
                        annotation.set_info(
                            title="‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏",
                            content=full_annotation_text
                        )
                        annotation.set_colors(stroke=[1, 0, 0])
                        annotation.update()
                        
                        annotations_added += 1
                        logger.info(f"‚úÖ –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è #{i+1} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è '{quote_char}' –≤ –ø–æ–∑–∏—Ü–∏–∏ {rect}")
                        
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ #{i+1}: {str(e)}")
            
            # –ú–µ—Ç–æ–¥ 2: –¢–æ—á–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ span'—ã
            if not quote_instances or len(quote_instances) < page_text.count(quote_char):
                logger.info(f"üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ span'—ã")
                
                positions = [i for i, char in enumerate(page_text) if char == quote_char]
                logger.info(f"üìç –ù–∞–π–¥–µ–Ω–æ {len(positions)} –ø–æ–∑–∏—Ü–∏–π '{quote_char}' –≤ —Ç–µ–∫—Å—Ç–µ: {positions[:10]}...")
                
                for pos in positions:
                    char_rect = self.find_char_position_in_spans(page, quote_char, pos)
                    
                    if char_rect:
                        try:
                            full_annotation_text = (
                                '–í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –Ω–µ —Ç–µ –∫–∞–≤—ã—á–∫–∏. –ó–∞–º–µ–Ω–∏—Ç–µ –∏—Ö –Ω–∞ ¬´—ë–ª–æ—á–∫–∏¬ª –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º.\n'
                                f'–ù–∞–π–¥–µ–Ω —Å–∏–º–≤–æ–ª: "{quote_char}" (U+{ord(quote_char):04X}) –≤ –ø–æ–∑–∏—Ü–∏–∏ {pos}'
                            )
                            annotation = page.add_text_annot(
                                char_rect.tl,
                                full_annotation_text
                            )
                            annotation.set_info(
                                title="‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ (—Ç–æ—á–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ)",
                                content=full_annotation_text
                            )
                            annotation.set_colors(stroke=[1, 0, 0])
                            annotation.update()
                            
                            annotations_added += 1
                            logger.info(f"‚úÖ –¢–æ—á–Ω–∞—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è '{quote_char}' –≤ –ø–æ–∑–∏—Ü–∏–∏ {pos}")
                            
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–æ—á–Ω–æ–º –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ {pos}: {str(e)}")
            
            # –ú–µ—Ç–æ–¥ 3: Fallback —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ
            if annotations_added == 0:
                logger.warning(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –¥–ª—è '{quote_char}'")
                
                page_rect = page.rect
                fallback_point = fitz.Point(
                    page_rect.width - 100,
                    50 + (char_position % 10) * 20
                )
                
                full_annotation_text = (
                    '–í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –Ω–µ —Ç–µ –∫–∞–≤—ã—á–∫–∏. –ó–∞–º–µ–Ω–∏—Ç–µ –∏—Ö –Ω–∞ ¬´—ë–ª–æ—á–∫–∏¬ª –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º.\n'
                    f'–û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–∏–º–≤–æ–ª "{quote_char}" (U+{ord(quote_char):04X}) –≤ –ø–æ–∑–∏—Ü–∏–∏ {char_position}'
                )
                annotation = page.add_text_annot(
                    fallback_point,
                    full_annotation_text
                )
                annotation.set_info(
                    title="‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ (fallback)",
                    content=full_annotation_text
                )
                annotation.set_colors(stroke=[1, 0, 0])
                annotation.update()
                
                annotations_added += 1
                logger.info(f"‚úÖ Fallback –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è '{quote_char}'")
            
            logger.info(f"üìä –í—Å–µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π –¥–ª—è '{quote_char}': {annotations_added}")
            return annotations_added > 0
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –¥–ª—è '{quote_char}': {str(e)}")
            return False
    
    def save_pdf(self, output_dir="/tmp"):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç PDF —Ñ–∞–π–ª —Å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è–º–∏"""
        if not self.document or not self.input_path:
            raise Exception("–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –æ—Ç–∫—Ä—ã—Ç –∏–ª–∏ –ø—É—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω")
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            original_name = os.path.splitext(os.path.basename(self.input_path))[0]
            current_time = datetime.now()
            date_str = current_time.strftime("%d.%m.%Y")
            time_str = current_time.strftime("%H:%M")
            
            output_filename = f"{original_name}_–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ_{date_str}_–≤_{time_str}.pdf"
            output_path = os.path.join(output_dir, output_filename)
            
            self.document.save(output_path)
            logger.info(f"üíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")
            
            return output_path
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ PDF: {str(e)}")
            raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å PDF —Ñ–∞–π–ª: {str(e)}")
    
    def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç"""
        if self.document:
            self.document.close()
            self.document = None
            self.input_path = None
            logger.info("üìÑ PDF –¥–æ–∫—É–º–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç")
    
    def __enter__(self):
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        self.close()
