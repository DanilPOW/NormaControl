import fitz  # PyMuPDF
import re
import os
from datetime import datetime
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class PDFQuoteAnalyzer:
    def __init__(self):
        # –í—Å–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ (–≤—Å–µ –∫—Ä–æ–º–µ —Ä—É—Å—Å–∫–∏—Ö —ë–ª–æ—á–µ–∫ ¬´ ¬ª)
        BAD_QUOTES = '"\'""''‚Äû‚Äö‚Äπ‚Ä∫'
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        self.wrong_quotes_pattern = re.compile(f"[{re.escape(BAD_QUOTES)}]")
        
        logger.info(f"–ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞: {self.wrong_quotes_pattern.pattern}")
        
    def _get_context(self, text, position, context_length=30):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤–æ–∫—Ä—É–≥ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∫–∞–≤—ã—á–∫–∏"""
        start = max(0, position - context_length)
        end = min(len(text), position + context_length)
        return text[start:end].strip()
    
    def _add_annotation(self, page, quote_char, page_text, char_position):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É PDF"""
        try:
            # –ò—â–µ–º —Å–∏–º–≤–æ–ª –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            quote_instances = page.search_for(quote_char)
            
            if quote_instances:
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ
                rect = quote_instances[0]
                
                # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é
                annotation = page.add_text_annot(
                    rect.tl,
                    '–ö–∞–≤—ã—á–∫–∏ —É–∫–∞–∑–∞–Ω—ã –Ω–µ –≤–µ—Ä–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞–≤—ã—á–∫–∏ ¬´—ë–ª–æ—á–∫–∏¬ª.'
                )
                
                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é
                annotation.set_info(
                    title="‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏",
                    content=f'–ù–∞–π–¥–µ–Ω —Å–∏–º–≤–æ–ª: "{quote_char}" (U+{ord(quote_char):04X})\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞–≤—ã—á–∫–∏ ¬´—ë–ª–æ—á–∫–∏¬ª.'
                )
                
                # –ö—Ä–∞—Å–Ω–∞—è —Ä–∞–º–∫–∞ –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏
                annotation.set_colors(stroke=[1, 0, 0])
                annotation.update()
                
                logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è –¥–ª—è '{quote_char}' (U+{ord(quote_char):04X})")
                
            else:
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ç–æ—á–Ω–æ–µ –º–µ—Å—Ç–æ, –¥–æ–±–∞–≤–ª—è–µ–º –≤ —É–≥–æ–ª —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                page_rect = page.rect
                fallback_point = fitz.Point(page_rect.width - 100, 50 + (char_position % 10) * 20)
                
                annotation = page.add_text_annot(
                    fallback_point,
                    f'–ù–∞–π–¥–µ–Ω–∞ –Ω–µ–øÔøΩÔøΩ–∞–≤–∏–ª—å–Ω–∞—è –∫–∞–≤—ã—á–∫–∞: "{quote_char}"'
                )
                annotation.set_info(
                    title="‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏",
                    content=f'–û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–∏–º–≤–æ–ª "{quote_char}" (U+{ord(quote_char):04X}). –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ¬´—ë–ª–æ—á–∫–∏¬ª.'
                )
                annotation.set_colors(stroke=[1, 0, 0])
                annotation.update()
                
                logger.warning(f"‚ö†Ô∏è –†–µ–∑–µ—Ä–≤–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –¥–ª—è '{quote_char}' (U+{ord(quote_char):04X})")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –¥–ª—è '{quote_char}': {str(e)}")
    
    def process_pdf(self, input_path, output_dir="/tmp"):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ PDF —Ñ–∞–π–ª–∞"""
        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º PDF
            doc = fitz.open(input_path)
            violations = []
            total_violations = 0
            
            logger.info(f"üìÑ –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ PDF: {os.path.basename(input_path)}")
            
            for page_num in range(len(doc)):
                page = doc[page_num]
                page_text = page.get_text()
                
                # –û—Ç–ª–∞–¥–∫–∞: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
                page_quotes = set()
                for char in page_text:
                    if char in '"\'""''‚Äû‚Äö‚Äπ‚Ä∫¬´¬ª':
                        page_quotes.add(f"{char} (U+{ord(char):04X})")
                
                if page_quotes:
                    logger.info(f"üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num + 1}: {', '.join(sorted(page_quotes))}")
                
                # –ü–æ–∏—Å–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∫–∞–≤—ã—á–µ–∫ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                matches = list(self.wrong_quotes_pattern.finditer(page_text))
                logger.info(f"üîç –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num + 1}: –Ω–∞–π–¥–µ–Ω–æ {len(matches)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π")
                
                for match in matches:
                    quote_char = match.group()
                    logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–∞–≤—ã—á–∫–∞: '{quote_char}' (U+{ord(quote_char):04X}) –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {match.start()}")
                    
                    violation = {
                        'page': page_num + 1,
                        'position': match.start(),
                        'quote': quote_char,
                        'unicode': f"U+{ord(quote_char):04X}",
                        'context': self._get_context(page_text, match.start())
                    }
                    violations.append(violation)
                    total_violations += 1
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é
                    self._add_annotation(page, quote_char, page_text, match.start())
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            original_name = os.path.splitext(os.path.basename(input_path))[0]
            current_time = datetime.now()
            date_str = current_time.strftime("%d.%m.%Y")
            time_str = current_time.strftime("%H:%M")
            
            output_filename = f"{original_name}_–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ_{date_str}_–≤_{time_str}.pdf"
            output_path = os.path.join(output_dir, output_filename)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º PDF —Å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è–º–∏
            doc.save(output_path)
            doc.close()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã
            user_message = self._generate_user_report(total_violations)
            admin_logs = self._generate_admin_logs(violations, input_path, output_path)
            
            logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–π–¥–µ–Ω–æ {total_violations} –Ω–∞—Ä—É—à–µ–Ω–∏–π")
            
            return {
                'status': 'success',
                'output_path': output_path,
                'user_message': user_message,
                'admin_logs': admin_logs,
                'violations_count': total_violations
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF: {str(e)}")
            return {
                'status': 'error',
                'error_message': str(e),
                'user_message': f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}",
                'admin_logs': f"ERROR: {str(e)}"
            }
    
    def _generate_user_report(self, count):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if count == 0:
            return "‚úÖ –í –¥–æ–∫—É–º–µ–Ω—Ç–µ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π —Å –∫–∞–≤—ã—á–∫–∞–º–∏."
        elif count == 1:
            return f"‚ö†Ô∏è –í –¥–æ–∫—É–º–µ–Ω—Ç–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω {count} —Å–ª—É—á–∞–π –Ω–∞—Ä—É—à–µ–Ω–∏—è –∫–∞–≤—ã—á–µ–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –≤ PDF."
        elif 2 <= count <= 4:
            return f"‚ö†Ô∏è –í –¥–æ–∫—É–º–µ–Ω—Ç–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ {count} —Å–ª—É—á–∞—è –Ω–∞—Ä—É—à–µ–Ω–∏–π –∫–∞–≤—ã—á–µ–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –≤ PDF."
        else:
            return f"‚ö†Ô∏è –í –¥–æ–∫—É–º–µ–Ω—Ç–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ {count} —Å–ª—É—á–∞–µ–≤ –Ω–∞—Ä—É—à–µ–Ω–∏–π –∫–∞–≤—ã—á–µ–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –≤ PDF."
    
    def _generate_admin_logs(self, violations, input_path, output_path):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–æ–≥–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        logs = [
            f"[{timestamp}] –§–∞–π–ª: {os.path.basename(input_path)}",
            f"[{timestamp}] –ù–∞–π–¥–µ–Ω–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π: {len(violations)}",
            f"[{timestamp}] –°–æ–∑–¥–∞–Ω: {os.path.basename(output_path)}"
        ]
        
        if violations:
            logs.append(f"[{timestamp}] –î–µ—Ç–∞–ª–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–π:")
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º –∫–∞–≤—ã—á–µ–∫
            quote_stats = {}
            for violation in violations:
                quote = violation['quote']
                unicode_code = violation['unicode']
                key = f"'{quote}' ({unicode_code})"
                quote_stats[key] = quote_stats.get(key, 0) + 1
            
            for quote_type, count in quote_stats.items():
                logs.append(f"  ‚Ä¢ {quote_type}: {count} —Ä–∞–∑")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –ø—Ä–∏–º–µ—Ä–æ–≤
            logs.append(f"[{timestamp}] –ü—Ä–∏–º–µ—Ä—ã:")
            for i, violation in enumerate(violations[:5], 1):
                logs.append(f"  {i}. –°—Ç—Ä.{violation['page']}: {violation['quote']} ‚Üí ...{violation['context']}...")
        
        return "\n".join(logs)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
analyzer = PDFQuoteAnalyzer()
