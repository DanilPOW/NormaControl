# -*- coding: utf-8 -*-
import fitz  # PyMuPDF
import re
import os
from datetime import datetime
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class PDFQuoteAnalyzer:
    def __init__(self):
        # –í—Å–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ ‚Äî ASCII –∏ —Ç–∏–ø–æ–≥—Ä–∞—Ñ—Å–∫–∏–µ
        BAD_QUOTES = "\"'‚Äú‚Äù‚Äò‚Äô‚Äû‚Äö‚Äπ‚Ä∫"
        self.bad_quotes_str = BAD_QUOTES  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.wrong_quotes_pattern = re.compile(f"[{re.escape(BAD_QUOTES)}]")
        
        logger.info(f"–ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞: {self.wrong_quotes_pattern.pattern}")
        logger.info("üéØ –ò—â–µ–º —Å–ª–µ–¥—É—é—â–∏–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏:")
        for char in BAD_QUOTES:
            logger.info(f"   '{char}' (U+{ord(char):04X})")

    def _extract_text_multiple_methods(self, page):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ä–∞–∑–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        methods = {}
        
        try:
            methods['standard'] = page.get_text()
        except Exception as e:
            methods['standard'] = f"ERROR: {str(e)}"
        
        try:
            methods['text_format'] = page.get_text("text")
        except Exception as e:
            methods['text_format'] = f"ERROR: {str(e)}"
        
        try:
            blocks = page.get_text("blocks")
            methods['blocks'] = "\n".join([block[4] for block in blocks if len(block) > 4])
        except Exception as e:
            methods['blocks'] = f"ERROR: {str(e)}"
        
        try:
            text_dict = page.get_text("dict")
            text_parts = []
            for block in text_dict.get("blocks", []):
                if "lines" in block:
                    for line in block["lines"]:
                        for span in line["spans"]:
                            text_parts.append(span.get("text", ""))
            methods['dict_method'] = "".join(text_parts)
        except Exception as e:
            methods['dict_method'] = f"ERROR: {str(e)}"
        
        return methods

    def _analyze_text_methods(self, methods, page_num):
        """–ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏ –≤—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ"""
        logger.info(f"üîç –°–†–ê–í–ù–ï–ù–ò–ï –ú–ï–¢–û–î–û–í –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø –¢–ï–ö–°–¢–ê (—Å—Ç—Ä. {page_num}):")
        
        best_method = None
        max_quotes = 0
        
        for method_name, text in methods.items():
            if isinstance(text, str):
                quote_count = 0
                found_quotes = []
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏
                for char in text:
                    if char in self.bad_quotes_str:
                        quote_count += 1
                        found_quotes.append(f"'{char}'(U+{ord(char):04X})")
                
                logger.info(f"üìñ {method_name}: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤, {quote_count} –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∫–∞–≤—ã—á–µ–∫")
                if found_quotes:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
                    unique_quotes = list(set(found_quotes))
                    logger.info(f"   –ù–∞–π–¥–µ–Ω—ã: {', '.join(unique_quotes[:10])}")
                
                preview = text[:100].replace('\n', '\\n').replace('\r', '\\r')
                logger.info(f"   –ü—Ä–µ–≤—å—é: {preview}...")
                
                if quote_count > max_quotes:
                    max_quotes = quote_count
                    best_method = method_name
            else:
                logger.error(f"‚ùå {method_name}: {text}")
        
        logger.info(f"üèÜ –õ—É—á—à–∏–π –º–µ—Ç–æ–¥: {best_method} ({max_quotes} –∫–∞–≤—ã—á–µ–∫)")
        return best_method, methods.get(best_method, "")

    def _get_context(self, text, position, context_length=30):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–∫—Ä—É–≥ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∫–∞–≤—ã—á–∫–∏"""
        start = max(0, position - context_length)
        end = min(len(text), position + context_length)
        return text[start:end].strip()

    def _find_char_position_in_spans(self, page, target_char, global_position):
        """–ù–∞—Ö–æ–¥–∏—Ç —Ç–æ—á–Ω—É—é –ø–æ–∑–∏—Ü–∏—é —Å–∏–º–≤–æ–ª–∞ –≤ span'–∞—Ö –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            text_dict = page.get_text("dict")
            char_counter = 0
            
            for block in text_dict.get("blocks", []):
                if "lines" not in block:
                    continue
                    
                for line in block["lines"]:
                    for span in line["spans"]:
                        span_text = span.get("text", "")
                        
                        for i, char in enumerate(span_text):
                            if char_counter == global_position and char == target_char:
                                # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é —Å–∏–º–≤–æ–ª–∞ –≤ span'–µ
                                bbox = span["bbox"]
                                char_width = (bbox[2] - bbox[0]) / len(span_text) if len(span_text) > 0 else 10
                                
                                char_rect = fitz.Rect(
                                    bbox[0] + i * char_width,
                                    bbox[1],
                                    bbox[0] + (i + 1) * char_width,
                                    bbox[3]
                                )
                                
                                return char_rect
                            
                            char_counter += 1
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ span'–∞—Ö: {str(e)}")
            return None

    def _add_annotation(self, page, quote_char, page_text, char_position):
        """–£–ª—É—á—à–µ–Ω–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É PDF"""
        annotations_added = 0
        
        try:
            # –ú–µ—Ç–æ–¥ 1: –ò—Å–ø–æ–ª—å–∑—É–µ–º search_for –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö –≤—Ö–æ–∂–¥–µ–Ω–∏–π
            quote_instances = page.search_for(quote_char)
            
            if quote_instances:
                logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(quote_instances)} –≤—Ö–æ–∂–¥–µ–Ω–∏–π '{quote_char}' —á–µ—Ä–µ–∑ search_for")
                
                # –ê–Ω–Ω–æ—Ç–∏—Ä—É–µ–º –í–°–ï –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ
                for i, rect in enumerate(quote_instances):
                    try:
                        annotation = page.add_text_annot(
                            rect.tl,
                            '–ö–∞–≤—ã—á–∫–∏ —É–∫–∞–∑–∞–Ω—ã –Ω–µ –≤–µ—Ä–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞–≤—ã—á–∫–∏ ¬´—ë–ª–æ—á–∫–∏¬ª.'
                        )
                        
                        annotation.set_info(
                            title="‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏",
                            content=f'–ù–∞–π–¥–µ–Ω —Å–∏–º–≤–æ–ª: "{quote_char}" (U+{ord(quote_char):04X})\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞–≤—ã—á–∫–∏ ¬´—ë–ª–æ—á–∫–∏¬ª.'
                        )
                        
                        annotation.set_colors(stroke=[1, 0, 0])
                        annotation.update()
                        
                        annotations_added += 1
                        logger.info(f"‚úÖ –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è #{i+1} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è '{quote_char}' –≤ –ø–æ–∑–∏—Ü–∏–∏ {rect}")
                        
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ #{i+1}: {str(e)}")
            
            # –ú–µ—Ç–æ–¥ 2: –ï—Å–ª–∏ search_for –Ω–µ –Ω–∞—à–µ–ª –∏–ª–∏ –Ω–∞—à–µ–ª –º–∞–ª–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            if not quote_instances or len(quote_instances) < page_text.count(quote_char):
                logger.info(f"üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ span'—ã")
                
                # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ —Å–∏–º–≤–æ–ª–∞ –≤ —Ç–µ–∫—Å—Ç–µ
                positions = [i for i, char in enumerate(page_text) if char == quote_char]
                logger.info(f"üìç –ù–∞–π–¥–µ–Ω–æ {len(positions)} –ø–æ–∑–∏—Ü–∏–π '{quote_char}' –≤ —Ç–µ–∫—Å—Ç–µ: {positions[:10]}...")
                
                for pos in positions:
                    char_rect = self._find_char_position_in_spans(page, quote_char, pos)
                    
                    if char_rect:
                        try:
                            annotation = page.add_text_annot(
                                char_rect.tl,
                                "–í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –Ω–µ —Ç–µ –∫–∞–≤—ã—á–∫–∏. –ó–∞–º–µ–Ω–∏—Ç–µ –∏—Ö –Ω–∞ ¬´—ë–ª–æ—á–∫–∏¬ª."
                            )
                            
                            annotation.set_info(
                                title="‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ (—Ç–æ—á–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ)",
                                content=f'–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞–≤—ã—á–∫–∏ ¬´—ë–ª–æ—á–∫–∏¬ª.'
                            )
                            
                            annotation.set_colors(stroke=[1, 0, 0])
                            annotation.update()
                            
                            annotations_added += 1
                            logger.info(f"‚úÖ –¢–æ—á–Ω–∞—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è '{quote_char}' –≤ –ø–æ–∑–∏—Ü–∏–∏ {pos}")
                            
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–æ—á–Ω–æ–º –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ {pos}: {str(e)}")
            
            # –ú–µ—Ç–æ–¥ 3: Fallback - –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ
            if annotations_added == 0:
                logger.warning(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –¥–ª—è '{quote_char}'")
                
                page_rect = page.rect
                fallback_point = fitz.Point(
                    page_rect.width - 100, 
                    50 + (char_position % 10) * 20
                )
                
                annotation = page.add_text_annot(
                    fallback_point,
                    f'–ù–∞–π–¥–µ–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–∞–≤—ã—á–∫–∞: "{quote_char}"'
                )
                
                annotation.set_info(
                    title="‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ (fallback)",
                    content=f'–û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–∏–º–≤–æ–ª "{quote_char}" (U+{ord(quote_char):04X}) –≤ –ø–æ–∑–∏—Ü–∏–∏ {char_position}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ¬´—ë–ª–æ—á–∫–∏¬ª.'
                )
                
                annotation.set_colors(stroke=[1, 0, 0])
                annotation.update()
                
                annotations_added += 1
                logger.info(f"‚úÖ Fallback –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è '{quote_char}'")
            
            logger.info(f"üìä –í—Å–µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π –¥–ª—è '{quote_char}': {annotations_added}")
            return annotations_added > 0
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –¥–ª—è '{quote_char}': {str(e)}")
            return False

    def process_pdf(self, input_path, output_dir="/tmp"):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ PDF —Ñ–∞–π–ª–∞"""
        try:
            doc = fitz.open(input_path)
            violations = []
            total_violations = 0
            total_annotations = 0
            
            logger.info(f"üìÑ –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ PDF: {os.path.basename(input_path)}")
            logger.info(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {len(doc)}")
            
            for page_num in range(len(doc)):
                page = doc[page_num]
                
                logger.info(f"\n{'='*60}")
                logger.info(f"üìñ –ê–ù–ê–õ–ò–ó –°–¢–†–ê–ù–ò–¶–´ {page_num + 1}")
                logger.info(f"{'='*60}")
                
                text_methods = self._extract_text_multiple_methods(page)
                best_method, page_text = self._analyze_text_methods(text_methods, page_num + 1)
                
                if not page_text or isinstance(page_text, str) and len(page_text.strip()) == 0:
                    logger.warning(f"‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num + 1}: —Ç–µ–∫—Å—Ç –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω")
                    continue
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫–∞–≤—ã—á–µ–∫ –≤ —Ç–µ–∫—Å—Ç–µ
                logger.info("üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–≤—ã—á–µ–∫ –≤ —Ç–µ–∫—Å—Ç–µ:")
                all_quotes_in_text = []
                for i, char in enumerate(page_text):
                    if char in self.bad_quotes_str:
                        context = page_text[max(0, i-10):i+10].replace('\n', ' ')
                        all_quotes_in_text.append(f"'{char}'(U+{ord(char):04X}) –≤ –ø–æ–∑–∏—Ü–∏–∏ {i}: ...{context}...")
                
                if all_quotes_in_text:
                    logger.info(f"   –ù–∞–π–¥–µ–Ω–æ –∫–∞–≤—ã—á–µ–∫ –≤ —Ç–µ–∫—Å—Ç–µ: {len(all_quotes_in_text)}")
                    for quote_info in all_quotes_in_text[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                        logger.info(f"   ‚Ä¢ {quote_info}")
                else:
                    logger.info("   –ö–∞–≤—ã—á–µ–∫ –≤ —Ç–µ–∫—Å—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
                logger.info(f"üîç –ü—Ä–∏–º–µ–Ω—è–µ–º regex –ø–æ–∏—Å–∫...")
                matches = list(self.wrong_quotes_pattern.finditer(page_text))
                logger.info(f"üîé Regex –Ω–∞—à–µ–ª —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {len(matches)}")
                
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ —Å–∏–º–≤–æ–ª–∞–º –¥–ª—è –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                matches_by_char = {}
                for match in matches:
                    quote_char = match.group()
                    if quote_char not in matches_by_char:
                        matches_by_char[quote_char] = []
                    matches_by_char[quote_char].append(match)
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–∏–ø –∫–∞–≤—ã—á–µ–∫ –æ—Ç–¥–µ–ª—å–Ω–æ
                for quote_char, char_matches in matches_by_char.items():
                    logger.info(f"üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–º–≤–æ–ª '{quote_char}' (U+{ord(quote_char):04X}): {len(char_matches)} –≤—Ö–æ–∂–¥–µ–Ω–∏–π")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –≤—Ö–æ–∂–¥–µ–Ω–∏–π —ç—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
                    success = self._add_annotation(page, quote_char, page_text, char_matches[0].start())
                    
                    if success:
                        total_annotations += 1
                        logger.info(f"‚úÖ –ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –¥–ª—è '{quote_char}' –¥–æ–±–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
                    else:
                        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –¥–ª—è '{quote_char}'")
                    
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –¥–ª—è –æ—Ç—á–µ—Ç–∞
                    for match in char_matches:
                        violation = {
                            'page': page_num + 1,
                            'position': match.start(),
                            'quote': quote_char,
                            'unicode': f"U+{ord(quote_char):04X}",
                            'context': self._get_context(page_text, match.start()),
                            'method': best_method
                        }
                        violations.append(violation)
                        total_violations += 1
                        
                        logger.info(f"üö® –ù–ê–†–£–®–ï–ù–ò–ï #{total_violations}: '{quote_char}' (U+{ord(quote_char):04X}) –Ω–∞ —Å—Ç—Ä. {page_num + 1}")
                        logger.info(f"   –ö–æ–Ω—Ç–µ–∫—Å—Ç: ...{violation['context']}...")
            
            logger.info(f"\n{'='*60}")
            logger.info(f"üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
            logger.info(f"{'='*60}")
            logger.info(f"–í—Å–µ–≥–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π –Ω–∞–π–¥–µ–Ω–æ: {total_violations}")
            logger.info(f"–í—Å–µ–≥–æ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–æ: {total_annotations}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            original_name = os.path.splitext(os.path.basename(input_path))[0]
            current_time = datetime.now()
            date_str = current_time.strftime("%d.%m.%Y")
            time_str = current_time.strftime("%H:%M")
            
            output_filename = f"{original_name}_–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ_{date_str}_–≤_{time_str}.pdf"
            output_path = os.path.join(output_dir, output_filename)
            
            doc.save(output_path)
            doc.close()
            
            logger.info(f"üíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")
            
            user_message = self._generate_user_report(total_violations)
            admin_logs = self._generate_admin_logs(violations, input_path, output_path)
            
            return {
                'status': 'success',
                'output_path': output_path,
                'user_message': user_message,
                'admin_logs': admin_logs,
                'violations_count': total_violations
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF: {str(e)}")
            return {
                'status': 'error',
                'error_message': str(e),
                'user_message': f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}",
                'admin_logs': f"ERROR: {str(e)}"
            }

    def _generate_user_report(self, count):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if count == 0:
            return "‚úÖ –í –¥–æ–∫—É–º–µ–Ω—Ç–µ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π —Å –∫–∞–≤—ã—á–∫–∞–º–∏."
        elif count == 1:
            return f"‚ö†Ô∏è –í –¥–æ–∫—É–º–µ–Ω—Ç–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω {count} —Å–ª—É—á–∞–π –Ω–∞—Ä—É—à–µ–Ω–∏—è –∫–∞–≤—ã—á–µ–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –≤ PDF."
        elif 2 <= count <= 4:
            return f"‚ö†Ô∏è –í –¥–æ–∫—É–º–µ–Ω—Ç–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ {count} —Å–ª—É—á–∞—è –Ω–∞—Ä—É—à–µ–Ω–∏–π –∫–∞–≤—ã—á–µ–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –≤ PDF."
        else:
            return f"‚ö†Ô∏è –í –¥–æ–∫—É–º–µ–Ω—Ç–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ {count} —Å–ª—É—á–∞–µ–≤ –Ω–∞—Ä—É—à–µ–Ω–∏–π –∫–∞–≤—ã—á–µ–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –≤ PDF."

    def _generate_admin_logs(self, violations, input_path, output_path):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–æ–≥–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        logs = [
            f"[{timestamp}] –§–∞–π–ª: {os.path.basename(input_path)}",
            f"[{timestamp}] –ù–∞–π–¥–µ–Ω–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π: {len(violations)}",
            f"[{timestamp}] –°–æ–∑–¥–∞–Ω: {os.path.basename(output_path)}"
        ]
        
        if violations:
            logs.append(f"[{timestamp}] –î–µ—Ç–∞–ª–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–π:")
            quote_stats = {}
            method_stats = {}
            
            for violation in violations:
                quote = violation['quote']
                unicode_code = violation['unicode']
                method = violation.get('method', 'unknown')
                
                key = f"'{quote}' ({unicode_code})"
                quote_stats[key] = quote_stats.get(key, 0) + 1
                method_stats[method] = method_stats.get(method, 0) + 1
            
            logs.append("  –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∫–∞–≤—ã—á–µ–∫:")
            for quote_type, count in quote_stats.items():
                logs.append(f"    ‚Ä¢ {quote_type}: {count} —Ä–∞–∑")
            
            logs.append("  –ú–µ—Ç–æ–¥—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞:")
            for method, count in method_stats.items():
                logs.append(f"    ‚Ä¢ {method}: {count} –Ω–∞—Ä—É—à–µ–Ω–∏–π")
            
            logs.append(f"[{timestamp}] –ü—Ä–∏–º–µ—Ä—ã:")
            for i, violation in enumerate(violations[:5], 1):
                logs.append(f"  {i}. –°—Ç—Ä.{violation['page']}: {violation['quote']} ‚Üí ...{violation['context']}...")
        else:
            logs.append(f"[{timestamp}] –ù–∞—Ä—É—à–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        return "\n".join(logs)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
analyzer = PDFQuoteAnalyzer()
