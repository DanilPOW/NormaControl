import re
import logging
from datetime import datetime
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class PDFQuoteAnalyzer:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–≤—ã—á–µ–∫ –≤ PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö"""
    
    def __init__(self):
        # –í—Å–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ ‚Äî ASCII –∏ —Ç–∏–ø–æ–≥—Ä–∞—Ñ—Å–∫–∏–µ
        BAD_QUOTES = "\"'‚Äú‚Äù‚Äò‚Äô‚Äû‚Äö‚Äπ‚Ä∫"
        self.bad_quotes_str = BAD_QUOTES
        self.wrong_quotes_pattern = re.compile(f"[{re.escape(BAD_QUOTES)}]")
        
        logger.info("üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∫–∞–≤—ã—á–µ–∫")
        logger.info("üìã –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
        for char in BAD_QUOTES:
            logger.info(f"   '{char}' (U+{ord(char):04X})")
    
    def _analyze_text_methods(self, methods, page_num):
        """–ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏ –≤—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ"""
        logger.info(f"üîç –°–†–ê–í–ù–ï–ù–ò–ï –ú–ï–¢–û–î–û–í –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø –¢–ï–ö–°–¢–ê (—Å—Ç—Ä. {page_num}):")
        
        best_method = None
        max_quotes = 0
        
        for method_name, text in methods.items():
            if isinstance(text, str):
                quote_count = 0
                found_quotes = []
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏
                for char in text:
                    if char in self.bad_quotes_str:
                        quote_count += 1
                        found_quotes.append(f"'{char}'(U+{ord(char):04X})")
                
                logger.info(f"üìñ {method_name}: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤, {quote_count} –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∫–∞–≤—ã—á–µ–∫")
                if found_quotes:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
                    unique_quotes = list(set(found_quotes))
                    logger.info(f"   –ù–∞–π–¥–µ–Ω—ã: {', '.join(unique_quotes[:10])}")
                
                preview = text[:100].replace('\n', '\\n').replace('\r', '\\r')
                logger.info(f"   –ü—Ä–µ–≤—å—é: {preview}...")
                
                if quote_count > max_quotes:
                    max_quotes = quote_count
                    best_method = method_name
            else:
                logger.error(f"‚ùå {method_name}: {text}")
        
        logger.info(f"üèÜ –õ—É—á—à–∏–π –º–µ—Ç–æ–¥: {best_method} ({max_quotes} –∫–∞–≤—ã—á–µ–∫)")
        return best_method, methods.get(best_method, "")
    
    def _get_context(self, text, position, context_length=30):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–∫—Ä—É–≥ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∫–∞–≤—ã—á–∫–∏"""
        start = max(0, position - context_length)
        end = min(len(text), position + context_length)
        return text[start:end].strip()
    
    def analyze_document(self, pdf_document, pdf_handler):
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç PDF –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∫–∞–≤—ã—á–µ–∫
        
        Args:
            pdf_document: –û–±—ä–µ–∫—Ç PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞ (fitz.Document)
            pdf_handler: –≠–∫–∑–µ–º–ø–ª—è—Ä PDFHandler –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å PDF
            
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        """
        try:
            violations = []
            total_violations = 0
            total_annotations = 0
            
            logger.info(f"üìÑ –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞")
            logger.info(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {len(pdf_document)}")
            
            for page_num in range(len(pdf_document)):
                page = pdf_document[page_num]
                
                logger.info(f"\n{'='*60}")
                logger.info(f"üìñ –ê–ù–ê–õ–ò–ó –°–¢–†–ê–ù–ò–¶–´ {page_num + 1}")
                logger.info(f"{'='*60}")
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Ä–∞–∑–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏
                text_methods = pdf_handler.get_page_text_methods(page)
                best_method, page_text = self._analyze_text_methods(text_methods, page_num + 1)
                
                if not page_text or isinstance(page_text, str) and len(page_text.strip()) == 0:
                    logger.warning(f"‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num + 1}: —Ç–µ–∫—Å—Ç –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω")
                    continue
                
                # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–≤—ã—á–µ–∫ –≤ —Ç–µ–∫—Å—Ç–µ
                logger.info("üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–≤—ã—á–µ–∫ –≤ —Ç–µ–∫—Å—Ç–µ:")
                all_quotes_in_text = []
                for i, char in enumerate(page_text):
                    if char in self.bad_quotes_str:
                        context = page_text[max(0, i-10):i+10].replace('\n', ' ')
                        all_quotes_in_text.append(f"'{char}'(U+{ord(char):04X}) –≤ –ø–æ–∑–∏—Ü–∏–∏ {i}: ...{context}...")
                
                if all_quotes_in_text:
                    logger.info(f"   –ù–∞–π–¥–µ–Ω–æ –∫–∞–≤—ã—á–µ–∫ –≤ —Ç–µ–∫—Å—Ç–µ: {len(all_quotes_in_text)}")
                    for quote_info in all_quotes_in_text[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                        logger.info(f"   ‚Ä¢ {quote_info}")
                else:
                    logger.info("   –ö–∞–≤—ã—á–µ–∫ –≤ —Ç–µ–∫—Å—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º regex –ø–æ–∏—Å–∫
                logger.info(f"üîç –ü—Ä–∏–º–µ–Ω—è–µ–º regex –ø–æ–∏—Å–∫...")
                matches = list(self.wrong_quotes_pattern.finditer(page_text))
                logger.info(f"üîé Regex –Ω–∞—à–µ–ª —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {len(matches)}")
                
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ —Å–∏–º–≤–æ–ª–∞–º
                matches_by_char = {}
                for match in matches:
                    quote_char = match.group()
                    if quote_char not in matches_by_char:
                        matches_by_char[quote_char] = []
                    matches_by_char[quote_char].append(match)
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–∏–ø –∫–∞–≤—ã—á–µ–∫ –æ—Ç–¥–µ–ª—å–Ω–æ
                for quote_char, char_matches in matches_by_char.items():
                    logger.info(f"üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–º–≤–æ–ª '{quote_char}' (U+{ord(quote_char):04X}): {len(char_matches)} –≤—Ö–æ–∂–¥–µ–Ω–∏–π")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –≤—Ö–æ–∂–¥–µ–Ω–∏–π —ç—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
                    success = pdf_handler.add_annotation_to_page(page, quote_char, page_text, char_matches[0].start())
                    
                    if success:
                        total_annotations += 1
                        logger.info(f"‚úÖ –ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –¥–ª—è '{quote_char}' –¥–æ–±–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
                    else:
                        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –¥–ª—è '{quote_char}'")
                    
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –¥–ª—è –æ—Ç—á–µ—Ç–∞
                    for match in char_matches:
                        violation = {
                            'page': page_num + 1,
                            'position': match.start(),
                            'quote': quote_char,
                            'unicode': f"U+{ord(quote_char):04X}",
                            'context': self._get_context(page_text, match.start()),
                            'method': best_method
                        }
                        violations.append(violation)
                        total_violations += 1
                        
                        logger.info(f"üö® –ù–ê–†–£–®–ï–ù–ò–ï #{total_violations}: '{quote_char}' (U+{ord(quote_char):04X}) –Ω–∞ —Å—Ç—Ä. {page_num + 1}")
                        logger.info(f"   –ö–æ–Ω—Ç–µ–∫—Å—Ç: ...{violation['context']}...")
            
            logger.info(f"\n{'='*60}")
            logger.info(f"üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
            logger.info(f"{'='*60}")
            logger.info(f"–í—Å–µ–≥–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π –Ω–∞–π–¥–µ–Ω–æ: {total_violations}")
            logger.info(f"–í—Å–µ–≥–æ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–æ: {total_annotations}")
            
            return {
                'status': 'success',
                'violations': violations,
                'violations_count': total_violations,
                'annotations_count': total_annotations
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}")
            return {
                'status': 'error',
                'error_message': str(e),
                'violations_count': 0,
                'annotations_count': 0
            }
    
    def _generate_short_user_report(self, violations):
        count = len(violations)
        if count == 0:
            return "‚úÖ–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–≤—ã—á–µ–∫"
        pages = sorted(set([v['page'] for v in violations]))
        if count == 1:
            return f"‚ö†Ô∏è–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–≤—ã—á–µ–∫: –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ 1 –Ω–∞—Ä—É—à–µ–Ω–∏–µ –∫–∞–≤—ã—á–µ–∫ (—Å—Ç—Ä–∞–Ω–∏—Ü–µ {pages[0]})."
        else:
            return f"‚ö†Ô∏è–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–≤—ã—á–µ–∫: –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ {count} –Ω–∞—Ä—É—à–µ–Ω–∏–π –∫–∞–≤—ã—á–µ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö: {', '.join(map(str, pages))}."
    
    def _generate_admin_logs(self, violations, input_path, output_path):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–æ–≥–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        logs = [
            f"[{timestamp}] –§–∞–π–ª: {os.path.basename(input_path)}",
            f"[{timestamp}] –ù–∞–π–¥–µ–Ω–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π: {len(violations)}",
            f"[{timestamp}] –°–æ–∑–¥–∞–Ω: {os.path.basename(output_path)}"
        ]
        
        if violations:
            logs.append(f"[{timestamp}] –î–µ—Ç–∞–ª–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–π:")
            quote_stats = {}
            method_stats = {}
            
            for violation in violations:
                quote = violation['quote']
                unicode_code = violation['unicode']
                method = violation.get('method', 'unknown')
                
                key = f"'{quote}' ({unicode_code})"
                quote_stats[key] = quote_stats.get(key, 0) + 1
                method_stats[method] = method_stats.get(method, 0) + 1
            
            logs.append("  –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∫–∞–≤—ã—á–µ–∫:")
            for quote_type, count in quote_stats.items():
                logs.append(f"    ‚Ä¢ {quote_type}: {count} —Ä–∞–∑")
            
            logs.append("  –ú–µ—Ç–æ–¥—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞:")
            for method, count in method_stats.items():
                logs.append(f"    ‚Ä¢ {method}: {count} –Ω–∞—Ä—É—à–µ–Ω–∏–π")
            
            logs.append(f"[{timestamp}] –ü—Ä–∏–º–µ—Ä—ã:")
            for i, violation in enumerate(violations[:5], 1):
                logs.append(f"  {i}. –°—Ç—Ä.{violation['page']}: {violation['quote']} ‚Üí ...{violation['context']}...")
        else:
            logs.append(f"[{timestamp}] –ù–∞—Ä—É—à–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        return "\n".join(logs)
    
    def process_pdf_file(self, input_path, output_dir="/tmp", basename=None):
        """
        –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ PDF —Ñ–∞–π–ª–∞ - –æ—Ç–∫—Ä—ã—Ç–∏–µ, –∞–Ω–∞–ª–∏–∑, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        
        Args:
            input_path: –ü—É—Ç—å –∫ –≤—Ö–æ–¥–Ω–æ–º—É PDF —Ñ–∞–π–ª—É
            output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        from .pdf_handler import PDFHandler
        
        try:
            with PDFHandler() as pdf_handler:
                # –û—Ç–∫—Ä—ã–≤–∞–µ–º PDF
                pdf_document = pdf_handler.open_pdf(input_path)
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
                analysis_result = self.analyze_document(pdf_document, pdf_handler)
                
                if analysis_result['status'] != 'success':
                    return {
                        'status': 'error',
                        'error_message': analysis_result['error_message'],
                        'user_message': f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–π–ª–∞: {analysis_result['error_message']}",
                        'admin_logs': f"ERROR: {analysis_result['error_message']}"
                    }
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª —Å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è–º–∏
                output_path = pdf_handler.save_pdf(output_dir, basename=basename)
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã
                violations_count = analysis_result['violations_count']
                user_message = self._generate_user_report(violations_count)
                admin_logs = self._generate_admin_logs(
                    analysis_result['violations'], 
                    input_path, 
                    output_path
                )
                
                return {
                    'status': 'success',
                    'output_path': output_path,
                    'user_message': user_message,
                    'admin_logs': admin_logs,
                    'violations_count': violations_count
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF —Ñ–∞–π–ª–∞: {str(e)}")
            return {
                'status': 'error',
                'error_message': str(e),
                'user_message': f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}",
                'admin_logs': f"ERROR: {str(e)}"
            }

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
analyzer = PDFQuoteAnalyzer()
